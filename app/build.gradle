buildscript {
  repositories {
    mavenCentral()
    maven {
      url 'http://download.crashlytics.com/maven'
    }
  }
  dependencies {
    classpath group: 'com.android.tools.build', name: 'gradle', version: '0.6.+'
    classpath group: 'com.crashlytics.tools.gradle', name: 'crashlytics-gradle', version: '1.+'
  }
}

apply plugin: 'android'
apply plugin: 'crashlytics'
apply plugin: 'checkstyle'

dependencies {
  repositories {
    mavenCentral()
    maven {
      url 'http://download.crashlytics.com/maven'
    }
  }
  compile group: 'com.android.support', name: 'support-v13', version: '13.0.+'
  compile group: 'com.crashlytics.android', name: 'crashlytics', version: '1.+'
  compile fileTree(dir: 'libs', include: '*.jar')

  compile group: 'com.jakewharton', name: 'butterknife', version: '3.0.+'
  compile group: 'com.squareup', name: 'otto', version: '1.3.+'
  compile group: 'com.squareup.dagger', name: 'dagger', version: '1.1.+'
  compile group: 'com.squareup.dagger', name: 'dagger-compiler', version: '1.1.+'
  compile group: 'com.squareup.picasso', name: 'picasso', version: '2.1.+'
  compile(group: 'de.keyboardsurfer.android.widget', name: 'crouton', version: '1.8.+') {
    exclude module: 'support-v4'
    compile group: 'com.android.support', name: 'support-v4', version: '13.0.+'
  }

  instrumentTestCompile group: 'com.squareup', name: 'fest-android', version: '1.0.+'
  instrumentTestCompile group: 'com.squareup.spoon', name: 'spoon-client', version: '1.1.+'
}

def versionMajor = 2
// major revisions
def versionMinor = 0
// . releases
def versionPatch = 0
// patch
def versionBuild = 0
// bump for dogfood builds, public betas, etc.

android {
  compileSdkVersion 19
  buildToolsVersion '19'

  testBuildType "debug"

  signingConfigs {
    release {
      storeFile file("keystore")
      storePassword "notYourRealPassword"
      keyAlias "keystore"
      keyPassword "notYourRealPassword"
    }
  }

  buildTypes {
    debug {
      packageNameSuffix ".debug"
      versionNameSuffix "-debug"
    }
    release {
      signingConfig signingConfigs.release
    }
    beta.initWith(buildTypes.release)
    beta {
      versionNameSuffix "-beta"
    }
    sourceSets.beta.setRoot('src/release')

    applicationVariants.all { variant ->
      apk = variant.packageApplication.outputFile;
      newName = apk.name.replace(".apk", "-v" + defaultConfig.versionCode + ".apk");
      variant.packageApplication.outputFile = new File(apk.parentFile, newName);
    }
  }

  defaultConfig {
    minSdkVersion 14
    targetSdkVersion 19
    versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
    versionName "${versionMajor}.${versionMinor}.${versionPatch}"
    buildConfig """\
          public static final boolean RELEASE = !DEBUG;
        """
  }
}

task askForPasswords << {
  def storePassword = new String(System.console().readLine("\n\$ Enter keystore password: "))
  def keyPassword = new String(System.console().readLine("\n\$ Enter key alias password: "))

  android.signingConfigs.release.storePassword = storePassword
  android.signingConfigs.release.keyPassword = keyPassword
}

tasks.whenTaskAdded { theTask ->
  if (theTask.name.equals("validateReleaseSigning")) {
    theTask.dependsOn "askForPasswords"
  }
}

checkstyle {
  configFile project.file('../checkstyle.xml')
  showViolations true
}

android.applicationVariants.all { variant ->
  def name = variant.buildType.name

  def checkstyle = project.tasks.create "checkstyle${name.capitalize()}", Checkstyle
  checkstyle.dependsOn variant.javaCompile
  checkstyle.source variant.javaCompile.source
  checkstyle.classpath = project.fileTree(variant.javaCompile.destinationDir)
  checkstyle.exclude('**/BuildConfig.java')
  checkstyle.exclude('**/R.java')
  checkstyle.exclude('**/Ln.java')
  checkstyle.exclude('**/ForegroundImageView.java')
  checkstyle.exclude('**/SafeAsyncTask.java')
  checkstyle.exclude('**/Strings.java')
  project.tasks.getByName("check").dependsOn checkstyle
}