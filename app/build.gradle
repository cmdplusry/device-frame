import java.text.SimpleDateFormat

buildscript {
  repositories {
    mavenCentral()
    maven {
      url 'http://download.crashlytics.com/maven'
    }
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:0.7.1'
    classpath 'com.crashlytics.tools.gradle:crashlytics-gradle:1.+'
    classpath 'com.stanfy.spoon:spoon-gradle-plugin:0.9.+'
    classpath 'com.neenbedankt.gradle.plugins:android-apt:1.+'
    classpath 'com.jakewharton.hugo:hugo-plugin:1.0.+'
  }
}

apply plugin: 'android'
apply plugin: 'crashlytics'
apply plugin: 'checkstyle'
apply plugin: 'spoon'
apply plugin: 'android-apt'
apply plugin: 'hugo'

dependencies {
  repositories {
    mavenCentral()
    maven {
      url 'http://download.crashlytics.com/maven'
    }
  }

  compile fileTree(dir: 'libs', include: '*.jar')
  compile 'com.android.support:support-v13:13.0.0'
  compile 'com.android.support:support-v4:13.0.0'
  compile 'com.crashlytics.android:crashlytics:1.+'
  compile 'com.jakewharton:butterknife:4.0.1'
  compile 'com.squareup:otto:1.3.4'
  compile 'com.squareup.dagger:dagger:1.2.0'
  apt 'com.squareup.dagger:dagger-compiler:1.2.0'
  compile 'com.squareup.picasso:picasso:2.1.1'
  compile 'com.f2prateek.ln:ln:1.1.1'
  compile 'com.f2prateek.dart:dart:1.0.0'
  compile 'de.keyboardsurfer.android.widget:crouton:1.8.2@aar'
  debugCompile 'com.jakewharton.scalpel:scalpel:1.1.1'
  instrumentTestCompile 'com.squareup:fest-android:1.0.+'
  instrumentTestCompile 'com.squareup.spoon:spoon-client:1.1.0'
}

def versionMajor = 2
def versionMinor = 0
def versionPatch = 0
// bump for dogfood builds, public betas, etc.
def versionBuild = 2

android {
  compileSdkVersion 19
  buildToolsVersion '19.0.1'

  packagingOptions {
    exclude 'META-INF/services/javax.annotation.processing.Processor'
  }

  lintOptions {
    disable 'InvalidPackage'
    abortOnError false
  }

  testBuildType "debug"

  signingConfigs {
    release {
      storeFile file("keystore")
      storePassword "notARealPassword"
      keyAlias "keystore"
      keyPassword "notARealPassword"
    }
  }

  buildTypes {
    debug {
      packageNameSuffix ".debug"
      versionNameSuffix "-debug"
    }
    release {
      signingConfig signingConfigs.release
    }
    beta.initWith(buildTypes.release)
    beta {
      debuggable true
      versionNameSuffix "-beta"
    }
    sourceSets.beta.setRoot('src/release')
  }

  defaultConfig {
    minSdkVersion 14
    targetSdkVersion 19
    packageName "com.f2prateek.dfg"
    versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
    versionName "${versionMajor}.${versionMinor}.${versionPatch}"
    buildConfigField "String", "GIT_SHA", "\"${gitSha()}\""
    buildConfigField "String", "BUILD_TIME", "\"${buildTime()}\""
  }
}

task askForPasswords << {
  def storePassword = new String(System.console().readLine("\n\$ Enter keystore password: "))
  def keyPassword = new String(System.console().readLine("\n\$ Enter key alias password: "))
  android.signingConfigs.release.storePassword = storePassword
  android.signingConfigs.release.keyPassword = keyPassword
}

tasks.whenTaskAdded { theTask ->
  if (theTask.name.equals("validateReleaseSigning")) {
    theTask.dependsOn "askForPasswords"
  }
}

checkstyle {
  configFile project.file('../checkstyle.xml')
  showViolations true
}

android.applicationVariants.all { variant ->
  def name = variant.buildType.name
  def checkstyle = project.tasks.create "checkstyle${name.capitalize()}", Checkstyle
  checkstyle.dependsOn variant.javaCompile
  checkstyle.source variant.javaCompile.source
  checkstyle.classpath = project.fileTree(variant.javaCompile.destinationDir)
  checkstyle.exclude('**/BuildConfig.java')
  checkstyle.exclude('**/R.java')
  checkstyle.exclude('**/ForegroundImageView.java')
  checkstyle.exclude('**/SafeAsyncTask.java')
  checkstyle.exclude('**/*\$\$*.java') // Dagger, ButterKnife, Dart
  project.tasks.getByName("check").dependsOn checkstyle

  def apk = variant.packageApplication.outputFile;
  def newName = apk.name.replace(".apk",
      "-v${android.defaultConfig.versionName}-${versionBuild}.apk");
  newName = newName.replace("app", "${android.defaultConfig.packageName}");
  variant.packageApplication.outputFile = new File(apk.parentFile, newName);
  if (variant.zipAlign) {
    variant.zipAlign.outputFile = new File(apk.parentFile, newName.replace("-unaligned", ""));
  }
}

def gitSha() {
  return 'git rev-parse --short HEAD'.execute().text.trim()
}

def buildTime() {
  def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'")
  df.setTimeZone(TimeZone.getTimeZone("UTC"))
  return df.format(new Date())
}